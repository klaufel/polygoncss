//
// Elements: Elements
// --------------------------------------------------

//## Reseting style and customized elements for the project

.test {
	display: flex;
}



// Grid
// ––––––––––––––––––––––––––––––––––––––––––––––––––

// .container is main centered wrapper with a max width of 112.0rem (1120px)
.container {
	
    background: #d2d2d2;
    padding: 2rem;
    width: 100%;
    margin: 0 auto;
	max-width: 80rem;


}
// Using flexbox for the grid, inspired by Philip Walton:
// http://philipwalton.github.io/solved-by-flexbox/demos/grids/
// By default each .column within a .row will evenly take up
// available width, and the height of each .column with take
// up the height of the tallest .column in the same .row
.row {
	

	display: flex;
	flex: 0 1 auto;
	flex-direction: column;
	flex-wrap: wrap;
	padding: 0;
	width: 100%;
	margin-bottom: .5rem;

	@media (min-width: $s-breakpoint-md) {
		flex-direction: row;	
	}
	/*&--no-padding {
		padding: 0;

		& > .column {
			padding: 0;
		}
	}*/
	> .column:nth-child(odd) {
		background: #63a7d2;
		
	}
	> .column:nth-child(even) {
		background: #64c3ff;
	}
	&--wrap {
		flex-wrap: wrap;
	}

	// Vertically Align Columns
	&--top {
		align-items: flex-start;
	}

	&--bottom {
		align-items: flex-end;
	}

	&--center {
		align-items: center;
	}

	&--stretch {
		align-items: stretch;
	}

	&--baseline {
		align-items: baseline;
	}
}



@function f-flex($f-limit, $f-i) {
	@return (100% / $f-limit) * $f-i;
}

.column {
	display: block;
	flex: 1 1 auto;
	margin-left: 0;
	max-width: 100%;
	width: 100%;
	color: #fff;
	font-size: em(14px);
	padding: 1rem;position: relative;

	&--top {
		align-self: flex-start;
	}	

	&--bottom {
		align-self: flex-end;
	}

	&--center {
		align-self: center;
	}

	@include t-mq($s-breakpoint-md) {

		@for $i from 1 through $s-grid-layout {
			&--#{$i} {
				flex: 0 0 f-flex($s-grid-layout, $i);
				width: f-flex($s-grid-layout, $i);
			}

			&--offset-#{$i} {
				margin-left: f-flex($s-grid-layout, $i);

			}
		}

		
	}
	
}

