/* ============================================================
 * Utilities: Widths
 * ============================================================
 *
 * Generates a series of utility classes that give a fluid width to
 * whichever element they're applied, combining the fractions numbers, e.g.:
 *
 *   <img src="" alt="" class="u-1/2" />
 *
 * These classes are most commonly used in conjunction with objects, e.g.:
 *
 *   <div class="o-layout__item  u-1/2">
 *
 * By default, will also generate responsive variants of each of these
 * classes by using your Sass MQ configuration, e.g.:
 *
 *   <div class="o-layout__item  u-1/1  u-1/2@sm  u-1/3@lg">
 *
 * Optionally, offset classes can br generated which can push and pull
 * elements left and right by a specified amount, e.g.:
 *
 *   <div class="o-layout__item  u-2/3  u-pull--1/3">
 *
 * This is useful for making very granular changes to the rendered order of
 * items in a layout.
 *
 * N.B. This option is turned off by default.
 *
 * Author: @haiticss
 *
 */


// ============================================================
// Variables

$u-widths__fractions:                    1 2 $s-config__grid--cols/2 $s-config__grid--cols !default;

// Option Breakpoints
$u-widths__breakpoints--enabled:         true !default;
$u-widths__breakpoints:                  $s-breakpoints !default;
//$u-widths__breakpoints:                  map_remove($s-breakpoints, 'xs') !default;



// ============================================================
// Mixins & functions

@mixin u-widths($_columns,  $_bp-suffix: null) {
  @each $_denominator in $_columns {
    @for $_numerator from 1 through $_denominator {
      @if ($_numerator != $_denominator or $_denominator == 1) {
        
        .u-#{$_numerator}\/#{$_denominator}#{$_bp-suffix} {
          width: ($_numerator / $_denominator) * 100% !important;
          max-width: ($_numerator / $_denominator) * 100% !important;
        }

        .u-offset-#{$_numerator}\/#{$_denominator}#{$_bp-suffix} {
          margin-left: ($_numerator / $_denominator) * 100% !important;
        }

      }
    }
  }
}


// ============================================================
// CSS output

@include u-widths($u-widths__fractions);

@if ($u-widths__breakpoints--enabled) {
  @each $_breakpoint-name, $_breakpoint-unit in $u-widths__breakpoints {
    @include t-mq($_breakpoint-name) {

      $_breakpoint-name: \@#{$_breakpoint-name};
      @include u-widths($u-widths__fractions, $_breakpoint-name);

      .u-100#{$_breakpoint-name} {
        width: 100% !important;
        max-width: 100% !important;
      }

    }
  }
}

.u-pull {
  margin-left: 0 !important;
}

.u-pull\@sm {
  @include t-mq('sm') {
    margin-left: 0 !important;  
  }  
}

.u-pull\@md {
  @include t-mq('md') {
    margin-left: 0 !important;  
  }  
}

.u-pull\@lg {
  @include t-mq('lg') {
    margin-left: 0 !important;  
  }  
}

